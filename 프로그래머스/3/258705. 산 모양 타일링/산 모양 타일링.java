class Solution {
    public int solution(int n, int[] tops) {
        int[] a = new int[n]; // 오른쪽 작은 정삼각형과의 경우의 수
        int[] b = new int[n]; // 그 외 경우의 수
        
        a[0] = 1; // 오른쪽 정삼각형과 덮는 경우 1
        b[0] = 2; // 왼쪽 정삼각형과 덮는 경우 1 + 아무것도 덮지 않은 경우 1
        
        if(tops[0] == 1) // 위에 정삼각형이 존재하는 경우 
            b[0]++;
        
        // 아래를 항하는 정삼각형 2번째부터 n번째까지 경우의 수
        for(int i = 1; i < n; i++) {
            a[i] = (a[i - 1] + b[i - 1]) % 10007; // i번째 정삼각형이 오른쪽 삼각형과 덮는 경우의 수
            b[i] = (b[i - 1] * 2 + a[i - 1]) % 10007; // i번째 정삼각형이 그외를 덮거나 덮지않는 경우의 수
            
            if(tops[i] == 1)
                b[i] = (b[i - 1] * 3 + a[i - 1] * 2) % 10007; // 위에 삼각형이 존재할 경우의 수
        }
        
        return (a[n - 1] + b[n - 1]) % 10007;
    }
}